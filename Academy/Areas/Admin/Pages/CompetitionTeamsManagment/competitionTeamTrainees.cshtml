@page
@model Academy.Areas.Admin.Pages.CompetitionTeamsManagment.competitionTeamTraineesModel
@{
    ViewBag.Title = "Competition Teams";
    ViewBag.pTitle = "Competition Team Trainees";
    ViewBag.pageTitle = "Competition Teams";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-xxl-12 col-xl-12">
        <div class="card card-height-100">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Competition Team Trainees</h4>

            </div>
            <!-- end card header -->
            <!-- card body -->
            <div class="card-body">
                @(Html.DevExtreme().DataGrid<Academy.Models.TraineeCompetitionTeam>()
                    .DataSource(ds => ds.RemoteController()
                    .LoadUrl(Url.Page("competitionTeamTrainees", "GridData"))
                    .Key("Id")

                    .LoadParams(new { id = Model.Id })
                    )
                    .RemoteOperations(true)
                    .ColumnHidingEnabled(true)
                    .Width("100%")
                    .Columns(columns =>
                    {
                        // Example column configuration
                        columns.AddFor(m => m.Trainee.TraineeName).Caption("Trainee");
                        columns.AddFor(m => m.CompetitionTeam.CompetitionDepartment).Caption("Competition Department");
                        @*
                columns.Add().Caption("Status").CellTemplate(@<text>
                <span>
                <%= data.IsActive ? "Active" : "Not Active" %>
                </span>
                </text>);

                *@
                    })
                    .ShowColumnLines(true)
                    .ShowRowLines(true)
                    //.Export(e => e.Enabled(true).AllowExportSelectedData(true))
                    //.OnExporting("exporting")
                    .FilterRow(f => f.Visible(true))
                    .HeaderFilter(f => f.Visible(true))
                    .GroupPanel(p => p.Visible(true))
                    //.Selection(s => s.Mode(SelectionMode.Multiple))
                    .Paging(paging => paging.PageSize(5).Enabled(true))
                    .WordWrapEnabled(true)
                    .ColumnAutoWidth(true)
                    .ShowBorders(true)
                    //.ColumnChooser(c => c.Enabled(true))
                    .ColumnFixing(c => c.Enabled(true))
                    .Grouping(g => g.AutoExpandAll(false))
                    .Pager(pager =>
                    {
                        pager.Visible(true);
                        pager.DisplayMode(GridPagerDisplayMode.Full);
                        pager.ShowPageSizeSelector(true);
                        pager.AllowedPageSizes(new JS("[5,10,20,50,100,'all']"));
                        pager.ShowInfo(true);
                        pager.ShowNavigationButtons(true);
                    })
                    .SearchPanel(searchPanel => searchPanel
                    .Visible(true)
                    .Placeholder("SearchTxt"))
                    .RemoteOperations(false)
                    @*  .Summary(s => s
                .TotalItems(totalItems =>
                {
                totalItems.AddFor(m => m.BranchId).SummaryType(SummaryType.Count);
                })
                .GroupItems(groupItems =>
                {
                groupItems.Add().SummaryType(SummaryType.Count);
                })
                ) *@
                    )
            </div>
            <!-- End Card Body  -->


        </div>
    </div>
</div>
